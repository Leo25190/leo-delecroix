---
import { type CollectionEntry, getCollection, render } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import Button from '../../components/Button.astro';
import FormattedDate from '../../components/FormattedDate.astro';
// import experiencePreview from '../../components/experiencePreview.astro';
import Subscribe from '../../components/Subscribe.astro';
import { sortItemsByDateDesc } from '../../utils/data-utils';
import { slugify } from '../../utils/common-utils';

export async function getStaticPaths() {
    const experiences = await getCollection('experiences');
    const experienceCount = experiences.length;
    return experiences.map((experience, index) => ({
        params: { id: experience.id },
        props: {
            experience,
            prevexperience: index + 1 !== experienceCount ? experiences[index + 1] : null,
            nextexperience: index !== 0 ? experiences[index - 1] : null
        }
    }));
}

type Props = { experience: CollectionEntry<'experiences'>; prevexperience: CollectionEntry<'experiences'>; nextexperience: CollectionEntry<'experiences'> };

const { href } = Astro.url;
const { experience, prevexperience, nextexperience } = Astro.props;
const { title, description, startDate, endDate, isFeatured, city, company, seo } = experience.data;
const { Content } = await render(experience);
---

<BaseLayout title={seo?.title ?? title} description={seo?.description ?? description} image={seo?.image} pageType="article" showHeader={false}>
    <article class="mb-16 sm:mb-24">
        <header class="mb-8">
            <h1 class="text-3xl leading-tight font-serif font-medium sm:text-5xl sm:leading-tight">{title}</h1>
            <div class="mt-4 text-sm">
                <!-- <FormattedDate date={startDate} /> -->
                {
                    endDate && (
                        <>
                            {' '}
                            <span>{/* (Updated on <FormattedDate date={endDate} />) */}</span>
                        </>
                    )
                }
            </div>
        </header>
        <div class="max-w-none prose-base sm:prose-lg">
            <Content />
        </div>
        <!-- <div class="mt-8 flex flex-wrap items-center gap-6 text-sm justify-between sm:mt-12 sm:text-base">
            {
                tags.length > 0 && (
                    <div class="flex flex-wrap gap-x-5 gap-y-1 text-sm">
                        {tags.map((tag) => (
                            <a class="text-main hover:underline" href={`/tags/${slugify(tag)}`}>
                                #{tag}
                            </a>
                        ))}
                    </div>
                )
            }
            <Button class="copy-url-button" aria-label="Copy link" data-url={href} data-tooltip-default="Copy link" data-tooltip-success="Copied">Share</Button>
        </div> -->
    </article>
    {
        (prevexperience || nextexperience) && (
            <div class="my-16 sm:my-24">
                <h2 class="mb-12 text-xl font-serif italic sm:mb-16 sm:text-2xl">Read Next</h2>
                {nextexperience && <experiencePreview experience={nextexperience} class="mb-10 sm:mb-12" headingLevel="h3" />}
                {prevexperience && <experiencePreview experience={prevexperience} class="mb-10 sm:mb-12" headingLevel="h3" />}
            </div>
        )
    }
</BaseLayout>

<script>
    document.addEventListener('astro:page-load', () => {
        const copyUrlButton = document.querySelector('.copy-url-button') as HTMLButtonElement;
        copyUrlButton?.addEventListener('click', async () => {
            await copyUrl(copyUrlButton);
        });

        async function copyUrl(button: HTMLButtonElement) {
            let url = button.getAttribute('data-url') || '';
            let label = button.innerText;

            await navigator.clipboard.writeText(url);

            button.innerText = 'Copied';

            setTimeout(() => {
                button.innerText = label;
            }, 2500);
        }
    });
</script>
